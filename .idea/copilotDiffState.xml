<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/site/src/jsMain/kotlin/com/mano/ashwa/sections/Banner.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/site/src/jsMain/kotlin/com/mano/ashwa/sections/Banner.kt" />
              <option name="originalContent" value="package com.mano.ashwa.sections&#10;&#10;import androidx.compose.runtime.Composable&#10;import com.mano.ashwa.components.rememberAnimatedText&#10;import com.mano.ashwa.styles.GradientTagLineStyle&#10;import com.mano.ashwa.styles.bannerStyle&#10;import com.mano.ashwa.styles.buttonStyle&#10;import com.mano.ashwa.styles.upDownAnim&#10;import com.mano.ashwa.styles.zoomIn&#10;import com.mano.ashwa.utils.Assets&#10;import com.mano.ashwa.utils.atBreakpointMd&#10;import com.varabyte.kobweb.compose.css.AnimationIterationCount&#10;import com.varabyte.kobweb.compose.foundation.layout.Column&#10;import com.varabyte.kobweb.compose.foundation.layout.Row&#10;import com.varabyte.kobweb.compose.ui.Modifier&#10;import com.varabyte.kobweb.compose.ui.modifiers.*&#10;import com.varabyte.kobweb.compose.ui.toAttrs&#10;import com.varabyte.kobweb.compose.ui.styleModifier&#10;import com.varabyte.kobweb.silk.components.graphics.Image&#10;import com.varabyte.kobweb.silk.components.icons.fa.FaCircleArrowRight&#10;import com.varabyte.kobweb.silk.components.layout.SimpleGrid&#10;import com.varabyte.kobweb.silk.components.layout.numColumns&#10;import com.varabyte.kobweb.silk.style.toModifier&#10;import com.varabyte.kobweb.silk.components.text.SpanText&#10;import com.varabyte.kobweb.silk.style.animation.toAnimation&#10;import org.jetbrains.compose.web.css.*&#10;import org.jetbrains.compose.web.css.keywords.auto&#10;import org.jetbrains.compose.web.dom.H1&#10;import org.jetbrains.compose.web.dom.P&#10;&#10;@Composable&#10;fun Banner() {&#10;    val animatedText = rememberAnimatedText(&#10;        toRotate = listOf(&quot;Android Developer&quot;, &quot;Web Developer&quot;, &quot;UI/UX Designer&quot;),&#10;        period = 2000&#10;    )&#10;    SimpleGrid(&#10;        numColumns(base = 1, md = 2),&#10;        modifier = bannerStyle.toModifier().id(&quot;home&quot;).styleModifier {&#10;            // Apply background specifically for the Banner on the home page&#10;            property(&quot;background-image&quot;, &quot;url(${Assets.BannerBg})&quot;)&#10;            property(&quot;background-position&quot;, &quot;center&quot;)&#10;            property(&quot;background-size&quot;, &quot;cover&quot;)&#10;            property(&quot;background-repeat&quot;, &quot;no-repeat&quot;)&#10;        }&#10;    ) {&#10;        BannerText(animatedText.value)&#10;        Image(&#10;            src = Assets.HeaderImg,&#10;            modifier = Modifier&#10;                .width(100.percent)&#10;                .padding(0.px atBreakpointMd 50.px)&#10;                .height(auto)&#10;                .animation(&#10;                    zoomIn.toAnimation(&#10;                        duration = 1.s,&#10;                        timingFunction = AnimationTimingFunction.Ease,&#10;                        iterationCount = AnimationIterationCount.of(1)&#10;                    ),&#10;                    upDownAnim.toAnimation(&#10;                        duration = 2.s,&#10;                        direction = AnimationDirection.Alternate,&#10;                        iterationCount = AnimationIterationCount.Infinite&#10;                    )&#10;                )&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BannerText(text: String) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.px, 50.px)&#10;    ) {&#10;        SpanText(&#10;            text = &quot;Welcome to my Portfolio&quot;,&#10;            modifier = GradientTagLineStyle.toModifier()&#10;        )&#10;        H1(&#10;            attrs = Modifier.fontSize(65.px atBreakpointMd 45.px)&#10;                .fontWeight(700)&#10;                .letterSpacing(0.80.px)&#10;                .lineHeight(1)&#10;                .margin(bottom = 20.px)&#10;                .display(DisplayStyle.Block)&#10;                .toAttrs()&#10;        ) {&#10;            SpanText(&#10;                text = &quot;Hi! I'm Abhishek $text&quot;,&#10;                modifier = Modifier.borderRight(&#10;                    width = 0.08.em,&#10;                    style = LineStyle.Solid,&#10;                    color = Color(&quot;#666&quot;)&#10;                )&#10;            )&#10;        }&#10;        P(&#10;            attrs = Modifier.color(Color.white)&#10;                .fontSize(18.px)&#10;                .letterSpacing(0.8.px)&#10;                .lineHeight(1.5.em)&#10;                .width(100.percent)&#10;                .toAttrs()&#10;        ) {&#10;            // SpanText(&quot;Constants.LOREM&quot;)&#10;        }&#10;        Row(modifier = buttonStyle.toModifier()) {&#10;            SpanText(&quot;Let's Connect&quot;)&#10;            FaCircleArrowRight()&#10;        }&#10;        // More attractive bio block: a short gradient-highlighted headline followed by a readable paragraph&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(top = 60.px)&#10;                .fontSize(24.px atBreakpointMd 20.px)&#10;                .lineHeight(1.6.em)&#10;        ) {&#10;            Column(Modifier.fillMaxWidth()) {&#10;                // Headline with gradient text&#10;                SpanText(&#10;                    //text = &quot;A motivated and quick-learning developer with hands-on experience in modern technologies and a strong desire to build impactful digital solutions. Driven by curiosity, innovation, and continuous growth.&quot;,&#10;                    //text = &quot;A motivated and quick-learning developer passionate about exploring the intersection of AI and creativity, skilled in Kotlin and machine learning, and driven to build innovative, human-centered digital solutions.&quot;,&#10;                    text = &quot;A motivated and quick-learning developer passionate about the intersection of AI and software development, continuously learning Kotlin, GoLang and machine learning to create smart and impactful solutions.&quot;,&#10;                    modifier = Modifier&#10;                        .fontSize(26.px atBreakpointMd 22.px)&#10;                        .fontWeight(600)&#10;                        .styleModifier {&#10;                            property(&quot;background&quot;, &quot;linear-gradient(90deg, #60A5FA, #7C3AED)&quot;)&#10;                            property(&quot;-webkit-background-clip&quot;, &quot;text&quot;)&#10;                            property(&quot;-webkit-text-fill-color&quot;, &quot;transparent&quot;)&#10;                            property(&quot;text-shadow&quot;, &quot;0 6px 18px rgba(124,58,237,0.08)&quot;)&#10;                            property(&quot;display&quot;, &quot;block&quot;)&#10;                        }&#10;                )&#10;&#10;&#10;            }&#10;        }&#10;    }&#10; }&#10;" />
              <option name="updatedContent" value="package com.mano.ashwa.sections&#10;&#10;import androidx.compose.runtime.Composable&#10;import com.mano.ashwa.components.rememberAnimatedText&#10;import com.mano.ashwa.styles.GradientTagLineStyle&#10;import com.mano.ashwa.styles.bannerStyle&#10;import com.mano.ashwa.styles.buttonStyle&#10;import com.mano.ashwa.styles.upDownAnim&#10;import com.mano.ashwa.styles.zoomIn&#10;import com.mano.ashwa.utils.Assets&#10;import com.mano.ashwa.utils.atBreakpointMd&#10;import com.varabyte.kobweb.compose.css.AnimationIterationCount&#10;import com.varabyte.kobweb.compose.foundation.layout.Column&#10;import com.varabyte.kobweb.compose.foundation.layout.Row&#10;import com.varabyte.kobweb.compose.ui.Modifier&#10;import com.varabyte.kobweb.compose.ui.modifiers.*&#10;import com.varabyte.kobweb.compose.ui.toAttrs&#10;import com.varabyte.kobweb.compose.ui.styleModifier&#10;import com.varabyte.kobweb.silk.components.graphics.Image&#10;import com.varabyte.kobweb.silk.components.icons.fa.FaCircleArrowRight&#10;import com.varabyte.kobweb.silk.components.layout.SimpleGrid&#10;import com.varabyte.kobweb.silk.components.layout.numColumns&#10;import com.varabyte.kobweb.silk.style.toModifier&#10;import com.varabyte.kobweb.silk.components.text.SpanText&#10;import com.varabyte.kobweb.silk.style.animation.toAnimation&#10;import org.jetbrains.compose.web.css.*&#10;import org.jetbrains.compose.web.css.keywords.auto&#10;import org.jetbrains.compose.web.dom.H1&#10;import org.jetbrains.compose.web.dom.P&#10;&#10;@Composable&#10;fun Banner() {&#10;    val animatedText = rememberAnimatedText(&#10;        toRotate = listOf(&quot;Android Developer&quot;, &quot;Web Developer&quot;, &quot;UI/UX Designer&quot;),&#10;        period = 2000&#10;    )&#10;    SimpleGrid(&#10;        numColumns(base = 1, md = 2),&#10;        modifier = bannerStyle.toModifier().id(&quot;home&quot;).styleModifier {&#10;            // Apply background specifically for the Banner on the home page&#10;            property(&quot;background-image&quot;, &quot;url(${Assets.BannerBg})&quot;)&#10;            property(&quot;background-position&quot;, &quot;center&quot;)&#10;            property(&quot;background-size&quot;, &quot;cover&quot;)&#10;            property(&quot;background-repeat&quot;, &quot;no-repeat&quot;)&#10;        }&#10;    ) {&#10;        BannerText(animatedText.value)&#10;        Image(&#10;            src = Assets.HeaderImg,&#10;            modifier = Modifier&#10;                .width(100.percent)&#10;                .padding(0.px atBreakpointMd 50.px)&#10;                .height(auto)&#10;                .animation(&#10;                    zoomIn.toAnimation(&#10;                        duration = 1.s,&#10;                        timingFunction = AnimationTimingFunction.Ease,&#10;                        iterationCount = AnimationIterationCount.of(1)&#10;                    ),&#10;                    upDownAnim.toAnimation(&#10;                        duration = 2.s,&#10;                        direction = AnimationDirection.Alternate,&#10;                        iterationCount = AnimationIterationCount.Infinite&#10;                    )&#10;                )&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BannerText(text: String) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.px, 50.px)&#10;    ) {&#10;        SpanText(&#10;            text = &quot;Welcome to my Portfolio&quot;,&#10;            modifier = GradientTagLineStyle.toModifier()&#10;        )&#10;        H1(&#10;            attrs = Modifier.fontSize(65.px atBreakpointMd 45.px)&#10;                .fontWeight(700)&#10;                .letterSpacing(0.80.px)&#10;                .lineHeight(1)&#10;                .margin(bottom = 20.px)&#10;                .display(DisplayStyle.Block)&#10;                .toAttrs()&#10;        ) {&#10;            SpanText(&#10;                text = &quot;Hi! I'm Abhishek $text&quot;,&#10;                modifier = Modifier.borderRight(&#10;                    width = 0.08.em,&#10;                    style = LineStyle.Solid,&#10;                    color = Color(&quot;#666&quot;)&#10;                )&#10;            )&#10;        }&#10;        P(&#10;            attrs = Modifier.color(Color.white)&#10;                .fontSize(18.px)&#10;                .letterSpacing(0.8.px)&#10;                .lineHeight(1.5.em)&#10;                .width(100.percent)&#10;                .toAttrs()&#10;        ) {&#10;            // SpanText(&quot;Constants.LOREM&quot;)&#10;        }&#10;        Row(modifier = buttonStyle.toModifier()) {&#10;            SpanText(&quot;Let's Connect&quot;)&#10;            FaCircleArrowRight()&#10;        }&#10;        // More attractive bio block: a short gradient-highlighted headline followed by a readable paragraph&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(top = 60.px)&#10;                .fontSize(24.px atBreakpointMd 20.px)&#10;                .lineHeight(1.6.em)&#10;        ) {&#10;            Column(Modifier.fillMaxWidth()) {&#10;                // Headline with gradient text&#10;                SpanText(&#10;                    //text = &quot;A motivated and quick-learning developer with hands-on experience in modern technologies and a strong desire to build impactful digital solutions. Driven by curiosity, innovation, and continuous growth.&quot;,&#10;                    //text = &quot;A motivated and quick-learning developer passionate about exploring the intersection of AI and creativity, skilled in Kotlin and machine learning, and driven to build innovative, human-centered digital solutions.&quot;,&#10;                    text = &quot;A motivated and quick-learning developer passionate about the intersection of AI and software development, continuously learning Kotlin, GoLang and machine learning to create smart and impactful solutions.&quot;,&#10;                    modifier = Modifier&#10;                        .fontSize(26.px atBreakpointMd 22.px)&#10;                        .fontWeight(600)&#10;                        .styleModifier {&#10;                            property(&quot;background&quot;, &quot;linear-gradient(90deg, #60A5FA, #7C3AED)&quot;)&#10;                            property(&quot;-webkit-background-clip&quot;, &quot;text&quot;)&#10;                            property(&quot;-webkit-text-fill-color&quot;, &quot;transparent&quot;)&#10;                            property(&quot;text-shadow&quot;, &quot;0 6px 18px rgba(124,58,237,0.08)&quot;)&#10;                            property(&quot;display&quot;, &quot;block&quot;)&#10;                        }&#10;                )&#10;&#10;&#10;            }&#10;        }&#10;    }&#10; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>